{"version":3,"sources":["angular-cache-buster.js","app.js","sortable.js"],"names":["angular","module","config","$httpProvider","interceptors","push","provider","this","matchlist","logRequests","black","setMatchlist","list","setLogRequests","$get","$q","$log","log","request","busted","i","length","url","match","d","Date","replace","indexOf","getTime","warn","info","when","app","constant","filter","value","$sce","trustAsHtml","httpRequestInterceptorCacheBusterProvider","$sceDelegateProvider","resourceUrlWhitelist","$routeProvider","$locationProvider","controller","templateUrl","otherwise","redirectTo","html5Mode","service","current","factory","$http","URL","getData","get","saveData","data","post","success","alert","error","err","getTemplates","DataService","TemplateService","Project","ctrl","content","fetchContent","then","result","fetchTemplates","tpl","currentProject","loadProject","project","index","$","toggleClass","openProjects","addProject","newProject","name","subject","locked","blocks","saveContent","removeProject","confirm","splice","copyContent","duplicate","copy","tracking","export","html","htmlTop","each","htmlBottom","val","dialog","buttons","OK","title","width","height","position","my","at","addTemplate","template","blockcount","block_id","block_type","directive","$compile","getTemplate","templates","contentType","header","featureImage","featureMessage","gridThree","productTwo","productThree","imageText","textImage","imageTextRed","textImageRed","imageTextGrey","textImageGrey","splitImage","spacer","footer","linker","scope","element","attrs","response","append","contents","restrict","link","onRemove","open","$event","hasClass","cls","className","$this","currentTarget","sibling","nextSibling","uiSortableConfig","$timeout","require","ngModel","uiSortable","combineCallbacks","first","second","apply","arguments","getSortableWidgetInstance","widgetFullName","hasSortingHelper","ui","helperOption","sortable","item","isCustomHelperUsed","isFloating","test","css","getElementScope","elementScopes","x","afterStop","e","_destroy","savedNodes","opts","directiveOpts","ui-floating","undefined","callbacks","receive","remove","start","stop","update","wrappers","helper","extend","fn","jquery","$watch","siblings","sortableWidgetInstance","target","floating","model","$modelValue","source","parent","sourceModel","cancel","_isCanceled","isCanceled","_isCustomHelperUsed","forEach","key","activate","placeholder","phElement","excludes","find","attr","not","connectedSortables","_connectedSortables","received","dropindex","droptarget","droptargetScope","droptargetModel","last","appendTo","$apply","moved","inner","innerResult","newVal"],"mappings":"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","file":"../scripts.min.js","sourcesContent":["angular.module('ngCacheBuster', [])\n  .config(['$httpProvider', function($httpProvider) {\n    return $httpProvider.interceptors.push('httpRequestInterceptorCacheBuster');\n  }])\n    .provider('httpRequestInterceptorCacheBuster', function() {\n\t\n\tthis.matchlist = [/.*partials.*/, /.*views.*/ ];\n\tthis.logRequests = false;\n\t\n\t//Default to whitelist (i.e. block all except matches)\n\tthis.black=false; \n\t\n\t//Select blacklist or whitelist, default to whitelist\n\tthis.setMatchlist = function(list,black) {\n\t    this.black = typeof black != 'undefined' ? black : false\n\t    this.matchlist = list;\n\t};\n\t\n\n\tthis.setLogRequests = function(logRequests) {\n\t    this.logRequests = logRequests;\n\t};\n\t\n\tthis.$get = ['$q', '$log', function($q, $log) {\n\t    var matchlist = this.matchlist;\n\t    var logRequests = this.logRequests;\n\t    var black = this.black;\n        if (logRequests) {\n            $log.log(\"Blacklist? \",black);\n        }\n\t    return {\n\t\t'request': function(config) {\n\t\t    //Blacklist by default, match with whitelist\n\t\t    var busted= !black; \n\t\t    \n\t\t    for(var i=0; i< matchlist.length; i++){\n\t\t\tif(config.url.match(matchlist[i])) {\n\t\t\t    busted=black; break;\n\t\t\t}\n\t\t    }\n\t\t    \n\t\t    //Bust if the URL was on blacklist or not on whitelist\n\t\t    if (busted) {\n\t\t\tvar d = new Date();\n\t\t\tconfig.url = config.url.replace(/[?|&]cacheBuster=\\d+/,'');\n\t\t\t//Some url's allready have '?' attached\n\t\t\tconfig.url+=config.url.indexOf('?') === -1 ? '?' : '&'\n\t\t\tconfig.url += 'cacheBuster=' + d.getTime();\n\t\t    }\n\t\t    \n\t\t    if (logRequests) {\n\t\t\tvar log='request.url =' + config.url\n\t\t\tbusted ? $log.warn(log) : $log.info(log)\n\t\t    }\n\n\t\t    return config || $q.when(config);\n\t\t}\n\t    }\n\t}];\n    });\n\n\n","var app = angular.module('DrizlyApp', [\n    'ui.sortable', \n    'ngRoute',\n    'ngCacheBuster'\n    ]);\n\napp.constant('URL', 'data/');\n\napp.filter('render', function () {\n  return function (value) {\n    return value;\n  };\n});\n\n// To Use \n// {{ content.link | render | trustAsHtml }}\napp.filter('trustAsHtml', function ($sce) {\n  return function (value) {\n    return $sce.trustAsHtml(value);\n  };\n});\n\n\napp.config(function(httpRequestInterceptorCacheBusterProvider){\n    httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*css.*/,/.*scripts.*/,/.*data.*/],true);\n});\n\napp.config(function ($sceDelegateProvider) {\n    $sceDelegateProvider.resourceUrlWhitelist(['self', '**']);\n});\n\napp.config( function($routeProvider, $locationProvider) {\n  $routeProvider\n  .when('/', {\n    controller: 'templateController',\n    templateUrl: 'partials/view1.html'\n  })\n  .otherwise({ redirectTo: '/'});\n\n  // use the HTML5 History API\n  $locationProvider.html5Mode(true);\n\n});\n\napp.service('Project', function () {\n    this.current = 0;\n});\n\napp.factory('DataService', function ($http, URL) {\n    var getData = function () {\n        return $http.get(URL + 'emails.json');\n    };\n\n    var saveData = function (data) {\n      $http.post('scripts/saveJSON.php', data).\n      success( function () {\n        alert('Success, List Saved');\n      }).\n      error( function (err) {\n        alert('Failed: ' + err);\n      });\n    }\n\n    return {\n        getData: getData,\n        saveData: saveData\n    };\n});\n\napp.factory('TemplateService', function ($http, URL) {\n    var getTemplates = function () {\n        return $http.get(URL + 'templates.json');\n    };\n\n    return {\n        getTemplates: getTemplates\n    };\n});\n\napp.controller('templateController', function (DataService, TemplateService, $sce, Project) {\n    var ctrl = this;\n    ctrl.content = [];\n\n    ctrl.fetchContent = function () {\n        DataService.getData().then(function (result) {\n            ctrl.content = result.data;\n        });\n    };\n\n    ctrl.fetchTemplates = function () {\n        TemplateService.getTemplates().then(function (result) {\n            ctrl.tpl = result.data;\n        });\n    };\n\n    ctrl.currentProject = Project.current;\n    ctrl.fetchContent();\n    ctrl.fetchTemplates();\n\n    // Load Project\n    ctrl.loadProject = function (project) {\n        var index = ctrl.content.indexOf(project);\n        Project.current = index;\n        ctrl.currentProject = index;\n        $('.main').toggleClass('hide-projects');\n    }\n\n    // Open Projects\n    ctrl.openProjects = function () {\n        $('.main').toggleClass('hide-projects');\n    }\n\n    // Add Projects\n    ctrl.addProject = function (newProject) {\n        ctrl.content.push({\n            name: newProject.name,\n            subject: newProject.subject,\n            locked: 0,\n            blocks: []\n        });\n    }\n\n    // Save Content\n    ctrl.saveContent = function () {\n      DataService.saveData(ctrl.content);\n    }\n\n    // Remove Projects\n    ctrl.removeProject = function(project) {\n      var index = ctrl.content.indexOf(project);\n      if (project.locked == 0) {    \n        if (confirm('Are you sure you want to delete this project?')) {\n            ctrl.content.splice(index, 1);\n        } else {\n            // Do nothing!\n        }\n      } else {\n        alert('Cannot delete project');\n      }\n    };\n\n    // Copy Content\n    ctrl.copyContent = function (project) {\n        if (confirm('Are you sure you want to copy this project?')) {\n            var index = ctrl.content.indexOf(project);\n            var duplicate = angular.copy(ctrl.content[index]);\n            var newProject = {};\n            // change array slightly\n            newProject.name = duplicate.name + ' Copy';\n            newProject.locked = 0;\n            newProject.subject = duplicate.subject;\n            newProject.tracking = duplicate.tracking;\n            newProject.blocks = duplicate.blocks;\n            ctrl.content.push(newProject)\n        } else {\n            // Do nothing!\n        }\n    }\n\n    // Export\n    ctrl.export = function() {\n        // Create Email\n        ctrl.html = ctrl.tpl.htmlTop;\n        $('.block-list .block').each(function (index) {\n            ctrl.html += $(this).html();\n        })\n        ctrl.html += ctrl.tpl.htmlBottom; \n    \n        // Place into modal window\n        $('.exportContents textarea').val(ctrl.html);\n\n        $('.exportContents').dialog({\n           buttons: {\n              OK: function() {$(this).dialog(\"close\");}\n           },\n           title: \"Email HTML\",\n           width: 600,\n           height: 400,\n           position: {\n              my: \"center center\",\n              at: \"center center\"\n           }\n        });\n\n    }\n\n    // Add Block\n    ctrl.addTemplate = function (template) {\n        var blockcount = ctrl.content[Project.current].blocks.length;\n        ctrl.content[Project.current].blocks.push({\n            block_id: blockcount + 1,\n            block_type: template\n        });\n    }\n\n});\n\napp.directive('block', function ($compile, TemplateService) {\n\n    var getTemplate = function (templates, contentType) {\n        var template = {};\n\n        switch (contentType) {\n            case 'header':\n                template = templates.header;\n                break;\n            case 'featureImage':\n                template = templates.featureImage;\n                break;\n            case 'featureMessage':\n                template = templates.featureMessage;\n                break;\n            case 'gridThree':\n                template = templates.gridThree;\n                break;\n            case 'productTwo':\n                template = templates.productTwo;\n                break;\n            case 'productThree':\n                template = templates.productThree;\n                break;\n            case 'imageText':\n                template = templates.imageText;\n                break;\n            case 'textImage':\n                template = templates.textImage;\n                break;\n            case 'imageTextRed':\n                template = templates.imageTextRed;\n                break;\n            case 'textImageRed':\n                template = templates.textImageRed;\n                break;\n            case 'imageTextGrey':\n                template = templates.imageTextGrey;\n                break;\n            case 'textImageGrey':\n                template = templates.textImageGrey;\n                break;\n            case 'splitImage':\n                template = templates.splitImage;\n                break;\n            case 'spacer':\n                template = templates.spacer;\n                break;\n            case 'footer':\n                template = templates.footer;\n                break;\n        }\n\n        return template;\n    };\n\n    var linker = function (scope, element, attrs ) {\n\n        TemplateService.getTemplates().then(function (response) {\n            var templates = response.data;\n            element.html(getTemplate(templates, scope.content.block_type));\n            $(element).append('<div class=\"block-toggle\"><a data-ng-click=\"onRemove()\" class=\"btn-trash-block icon-close\"></a></div>');\n            $compile(element.contents())(scope);\n        });\n\n    };\n\n    return {\n        restrict: 'EA',\n        replace: true,\n        template: '<li></li>',\n        link: linker,\n        scope: {\n            content: '=',\n            onRemove:\"&\"\n        }\n    };\n});\n\n\napp.directive('edit', function ($compile, TemplateService) {\n\n    var getTemplate = function (templates, contentType) {\n        var template = '';\n\n        // Move these definitions into individual files. and include them. \n\n        switch (contentType) {\n            case 'header':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Header</a><div class=\"accordion-body\"><label>Tracking Code<br><input type=\"text\" data-ng-model=\"content.tracking\" /></label><br><label>Button URL (Do Not Include Tracking)<br><input type=\"text\" data-ng-model=\"content.btnurl\" /></label><br><label>Button Text<br><input type=\"text\" data-ng-model=\"content.btntext\" /></div>';\n                break;\n            case 'featureImage':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Feature Image</a><div class=\"accordion-body\"><label>Image - 580x250<br><input type=\"text\" data-ng-model=\"content.image\" /></label><br><label>URL<br> <input type=\"text\" data-ng-model=\"content.link\" /></label><br><label>Alt Text<br> <input type=\"text\" data-ng-model=\"content.alt\" /></label></div>';\n                break;\n            case 'featureMessage':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Feature Message</a><div class=\"accordion-body\"><label>Headline<br><input type=\"text\" data-ng-model=\"content.headline\" /></label><br><label>Message<br> <textarea rows=\"8\" type=\"text\" data-ng-model=\"content.text\" /></textarea></label></div>';\n                break;\n            case 'gridThree':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Grid Three</a><div class=\"accordion-body\"> <a class=\"toggle\" data-ng-click=\"open($event)\">Image 1</a> <div class=\"accordion-body one\"> <label>Image 1 - 272x376 <br> <input data-ng-model=\"content.image1\" type=\"text\" /> </label> <br> <label>URL 1 <br> <input data-ng-model=\"content.link1\" type=\"text\" /> </label> <br> </div> <a class=\"toggle\" data-ng-click=\"open($event)\">Image 2</a> <div class=\"accordion-body two\"> <label>Image 2 - 272x178 <br> <input data-ng-model=\"content.image2\" type=\"text\" /> </label> <br> <label>URL 2 <br> <input data-ng-model=\"content.link2\" type=\"text\" /> </label> <br> </div> <a class=\"toggle\" data-ng-click=\"open($event)\">Image 3</a> <div class=\"accordion-body three\"> <label>Image 3 - 272x178 <br> <input data-ng-model=\"content.image3\" type=\"text\" /> </label> <br> <label>URL 3 <br> <input data-ng-model=\"content.link3\" type=\"text\" /> </label> <br> </div></div>';\n                break;\n            case 'productTwo':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Product Two</a><div class=\"accordion-body\"> <a class=\"toggle\" data-ng-click=\"open($event)\">Product 1</a> <div class=\"accordion-body one\"> <label>Image 1 - 150x225 <br> <input data-ng-model=\"content.image1\" type=\"text\" /> </label> <br> <label>URL 1 <br> <input data-ng-model=\"content.link1\" type=\"text\" /> </label> <br> <label>Line 1 <br> <input data-ng-model=\"content.texttop1\" type=\"text\" /> </label> <br> <label>Line 2 <br> <input data-ng-model=\"content.textbottom1\" type=\"text\" /> </label> <br> <label>Price <br> <input data-ng-model=\"content.price1\" type=\"text\" /> </label> <br> <label>Button Text <br> <input data-ng-model=\"content.buttontext1\" type=\"text\" /> </label> <br> </div> <a class=\"toggle\" data-ng-click=\"open($event)\">Product 2</a> <div class=\"accordion-body two\"> <label>Image 2 - 150x225 <br> <input data-ng-model=\"content.image2\" type=\"text\" /> </label> <br> <label>URL 2 <br> <input data-ng-model=\"content.link2\" type=\"text\" /> </label> <br> <label>Line 1 <br> <input data-ng-model=\"content.texttop2\" type=\"text\" /> </label> <br> <label>Line 2 <br> <input data-ng-model=\"content.textbottom2\" type=\"text\" /> </label> <br> <label>Price <br> <input data-ng-model=\"content.price2\" type=\"text\" /> </label> <br> <label>Button Text <br> <input data-ng-model=\"content.buttontext2\" type=\"text\" /> </label> <br> </div></div>';\n                break;\n            case 'productThree':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Product Three</a><div class=\"accordion-body\"><a class=\"toggle\" data-ng-click=\"open($event)\">Product 1</a><div class=\"accordion-body one\"><label>Image 1 - 150x225<br> <input data-ng-model=\"content.image1\" type=\"text\" /></label><br><label>URL 1<br> <input data-ng-model=\"content.link1\" type=\"text\" /></label><br><label>Line 1<br> <input data-ng-model=\"content.texttop1\" type=\"text\" /></label><br><label>Line 2<br> <input data-ng-model=\"content.textbottom1\" type=\"text\" /></label><br><label>Price<br> <input data-ng-model=\"content.price1\" type=\"text\" /></label><br><label>Button Text<br> <input data-ng-model=\"content.buttontext1\" type=\"text\" /></label><br></div><a class=\"toggle\" data-ng-click=\"open($event)\">Product 2</a><div class=\"accordion-body two\"><label>Image 2 - 150x225<br> <input data-ng-model=\"content.image2\" type=\"text\" /></label><br><label>URL 2<br> <input data-ng-model=\"content.link2\" type=\"text\" /></label><br><label>Line 1<br> <input data-ng-model=\"content.texttop2\" type=\"text\" /></label><br><label>Line 2<br> <input data-ng-model=\"content.textbottom2\" type=\"text\" /></label><br><label>Price<br> <input data-ng-model=\"content.price2\" type=\"text\" /></label><br><label>Button Text<br> <input data-ng-model=\"content.buttontext2\" type=\"text\" /></label><br></div><a class=\"toggle\" data-ng-click=\"open($event)\">Product 3</a><div class=\"accordion-body three\"><label>Image 3 - 150x225<br> <input data-ng-model=\"content.image3\" type=\"text\" /></label><br><label>URL 3<br> <input data-ng-model=\"content.link3\" type=\"text\" /></label><br><label>Line 1<br> <input data-ng-model=\"content.texttop3\" type=\"text\" /></label><br><label>Line 2<br> <input data-ng-model=\"content.textbottom3\" type=\"text\" /></label><br><label>Price<br> <input data-ng-model=\"content.price3\" type=\"text\" /></label><br><label>Button Text<br> <input data-ng-model=\"content.buttontext3\" type=\"text\" /></label><br></div></div>';\n                break;\n            case 'imageText':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Image Text</a><div class=\"accordion-body\"><label>Image - 116x116<br><input type=\"text\" data-ng-model=\"content.image\" /></label><br><label>URL<br> <input type=\"text\" data-ng-model=\"content.link\" /><br><label>Headline<br> <input type=\"text\" data-ng-model=\"content.headline\" /></label><br><label>Message<br> <input type=\"text\" data-ng-model=\"content.text\" /></label></div>';\n                break;\n            case 'textImage':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Text Image</a><div class=\"accordion-body\">Headline<br> <input type=\"text\" data-ng-model=\"content.headline\" /></label><br><label>Message<br> <input type=\"text\" data-ng-model=\"content.text\" /></label><br><label>Image - 472x396<br><input type=\"text\" data-ng-model=\"content.image\" /></label><br><label>URL<br> <input type=\"text\" data-ng-model=\"content.link\" /><label></div>';\n                break;\n            case 'imageTextRed':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Image Text \"Red\"</a><div class=\"accordion-body\"><label>Image- 472x396<br><input type=\"text\" data-ng-model=\"content.image\" /></label><br><label>URL<br> <input type=\"text\" data-ng-model=\"content.link\" /><br><label>Headline<br> <input type=\"text\" data-ng-model=\"content.headline\" /></label><br><label>Message<br> <input type=\"text\" data-ng-model=\"content.text\" /></label></div>';\n                break;\n            case 'textImageRed':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Text Image \"Red\"</a><div class=\"accordion-body\"><label>Image- 472x396<br><input type=\"text\" data-ng-model=\"content.image\" /></label><br><label>URL<br> <input type=\"text\" data-ng-model=\"content.link\" /><br><label>Headline<br> <input type=\"text\" data-ng-model=\"content.headline\" /></label><br><label>Message<br> <input type=\"text\" data-ng-model=\"content.text\" /></label></div>';\n                break;\n            case 'imageTextGrey':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Image Text \"Grey\"</a><div class=\"accordion-body\"><label>Image- 472x396<br><input type=\"text\" data-ng-model=\"content.image\" /></label><br><label>URL<br> <input type=\"text\" data-ng-model=\"content.link\" /><br><label>Headline<br> <input type=\"text\" data-ng-model=\"content.headline\" /></label><br><label>Message<br> <input type=\"text\" data-ng-model=\"content.text\" /></label></div>';\n                break;\n            case 'textImageGrey':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Text Image \"Grey\"</a><div class=\"accordion-body\"><label>Image- 472x396<br><input type=\"text\" data-ng-model=\"content.image\" /></label><br><label>URL<br> <input type=\"text\" data-ng-model=\"content.link\" /><br><label>Headline<br> <input type=\"text\" data-ng-model=\"content.headline\" /></label><br><label>Message<br> <input type=\"text\" data-ng-model=\"content.text\" /></label></div>';\n                break;\n            case 'splitImage':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Split Image</a><div class=\"accordion-body\"> <a class=\"toggle\" data-ng-click=\"open($event)\">Image 1</a><div class=\"accordion-body\"> <label>Left Image - 472x314 <br> <input type=\"text\" data-ng-model=\"content.image1\" /> <label>Left URL <br> <input type=\"text\" data-ng-model=\"content.link1\" /></div><a class=\"toggle\" data-ng-click=\"open($event)\">Image 2</a><div class=\"accordion-body\"> <label>Right Image - 472x314 <br> <input type=\"text\" data-ng-model=\"content.image2\" /> <label>Right URL <br> <input type=\"text\" data-ng-model=\"content.link2\" /></div></div>';\n                break;\n            case 'spacer':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Horz. Spacer</a><div class=\"accordion-body\"><label>Spacer Height (use px)<br><input type=\"text\" data-ng-model=\"content.height\" /></div>';\n                break;\n            case 'footer':\n                template = '<a class=\"toggle\" data-ng-click=\"open($event)\">Footer</a><div class=\"accordion-body\"><label>Tracking Code<br><input type=\"text\" data-ng-model=\"content.tracking\" /></div>';\n                break;\n        }\n\n        return template;\n    };\n\n    var linker = function (scope, element, attrs) {\n\n        TemplateService.getTemplates().then(function (response) {\n            var templates = response.data;\n            element.html(getTemplate(templates, scope.content.block_type ));\n            $compile(element.contents())(scope);\n        });\n\n        scope.open = function($event) {\n              \n            var $this = $event.currentTarget;\n            var sibling = $this.nextSibling;\n\n            if(hasClass(sibling, 'show')) {\n                sibling.className = sibling.className.replace( /(?:^|\\s)show(?!\\S)/g , '' );\n            } else {\n                sibling.className += \" show\";\n            }\n\n            function hasClass(element, cls) {\n                return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n            }\n\n        };\n\n\n    };\n\n    return {\n        restrict: 'EA',\n        replace: true,\n        link: linker,\n        template: '<li></li>',\n        scope: {\n            content: '='\n        }\n    };\n});\n\n\n\n","/*\njQuery UI Sortable plugin wrapper\n\n@param [ui-sortable] {object} Options to pass to $.fn.sortable() merged onto ui.config\n*/\nangular.module('ui.sortable', [])\n.value('uiSortableConfig',{})\n.directive('uiSortable', [\n  'uiSortableConfig', '$timeout', '$log',\n  function(uiSortableConfig, $timeout, $log) {\n    return {\n      require: '?ngModel',\n      scope: {\n        ngModel: '=',\n        uiSortable: '='\n      },\n      link: function(scope, element, attrs, ngModel) {\n        var savedNodes;\n\n        function combineCallbacks(first,second){\n          if(second && (typeof second === 'function')) {\n            return function() {\n              first.apply(this, arguments);\n              second.apply(this, arguments);\n            };\n          }\n          return first;\n        }\n\n        function getSortableWidgetInstance(element) {\n          // this is a fix to support jquery-ui prior to v1.11.x\n          // otherwise we should be using `element.sortable('instance')`\n          var data = element.data('ui-sortable');\n          if (data && typeof data === 'object' && data.widgetFullName === 'ui-sortable') {\n            return data;\n          }\n          return null;\n        }\n\n        function hasSortingHelper (element, ui) {\n          var helperOption = element.sortable('option','helper');\n          return helperOption === 'clone' || (typeof helperOption === 'function' && ui.item.sortable.isCustomHelperUsed());\n        }\n\n        // thanks jquery-ui\n        function isFloating (item) {\n          return (/left|right/).test(item.css('float')) || (/inline|table-cell/).test(item.css('display'));\n        }\n\n        function getElementScope(elementScopes, element) {\n          var result = null;\n          for (var i = 0; i < elementScopes.length; i++) {\n            var x = elementScopes[i];\n            if (x.element[0] === element[0]) {\n              result = x.scope;\n              break;\n            }\n          }\n          return result;\n        }\n\n        function afterStop(e, ui) {\n          ui.item.sortable._destroy();\n        }\n\n        var opts = {};\n\n        // directive specific options\n        var directiveOpts = {\n          'ui-floating': undefined\n        };\n\n        var callbacks = {\n          receive: null,\n          remove:null,\n          start:null,\n          stop:null,\n          update:null\n        };\n\n        var wrappers = {\n          helper: null\n        };\n\n        angular.extend(opts, directiveOpts, uiSortableConfig, scope.uiSortable);\n\n        if (!angular.element.fn || !angular.element.fn.jquery) {\n          $log.error('ui.sortable: jQuery should be included before AngularJS!');\n          return;\n        }\n\n        if (ngModel) {\n\n          // When we add or remove elements, we need the sortable to 'refresh'\n          // so it can find the new/removed elements.\n          scope.$watch('ngModel.length', function() {\n            // Timeout to let ng-repeat modify the DOM\n            $timeout(function() {\n              // ensure that the jquery-ui-sortable widget instance\n              // is still bound to the directive's element\n              if (!!getSortableWidgetInstance(element)) {\n                element.sortable('refresh');\n              }\n            }, 0, false);\n          });\n\n          callbacks.start = function(e, ui) {\n            if (opts['ui-floating'] === 'auto') {\n              // since the drag has started, the element will be\n              // absolutely positioned, so we check its siblings\n              var siblings = ui.item.siblings();\n              var sortableWidgetInstance = getSortableWidgetInstance(angular.element(e.target));\n              sortableWidgetInstance.floating = isFloating(siblings);\n            }\n\n            // Save the starting position of dragged item\n            ui.item.sortable = {\n              model: ngModel.$modelValue[ui.item.index()],\n              index: ui.item.index(),\n              source: ui.item.parent(),\n              sourceModel: ngModel.$modelValue,\n              cancel: function () {\n                ui.item.sortable._isCanceled = true;\n              },\n              isCanceled: function () {\n                return ui.item.sortable._isCanceled;\n              },\n              isCustomHelperUsed: function () {\n                return !!ui.item.sortable._isCustomHelperUsed;\n              },\n              _isCanceled: false,\n              _isCustomHelperUsed: ui.item.sortable._isCustomHelperUsed,\n              _destroy: function () {\n                angular.forEach(ui.item.sortable, function(value, key) {\n                  ui.item.sortable[key] = undefined;\n                });\n              }\n            };\n          };\n\n          callbacks.activate = function(e, ui) {\n            // We need to make a copy of the current element's contents so\n            // we can restore it after sortable has messed it up.\n            // This is inside activate (instead of start) in order to save\n            // both lists when dragging between connected lists.\n            savedNodes = element.contents();\n\n            // If this list has a placeholder (the connected lists won't),\n            // don't inlcude it in saved nodes.\n            var placeholder = element.sortable('option','placeholder');\n\n            // placeholder.element will be a function if the placeholder, has\n            // been created (placeholder will be an object).  If it hasn't\n            // been created, either placeholder will be false if no\n            // placeholder class was given or placeholder.element will be\n            // undefined if a class was given (placeholder will be a string)\n            if (placeholder && placeholder.element && typeof placeholder.element === 'function') {\n              var phElement = placeholder.element();\n              // workaround for jquery ui 1.9.x,\n              // not returning jquery collection\n              phElement = angular.element(phElement);\n\n              // exact match with the placeholder's class attribute to handle\n              // the case that multiple connected sortables exist and\n              // the placehoilder option equals the class of sortable items\n              var excludes = element.find('[class=\"' + phElement.attr('class') + '\"]:not([ng-repeat], [data-ng-repeat])');\n\n              savedNodes = savedNodes.not(excludes);\n            }\n\n            // save the directive's scope so that it is accessible from ui.item.sortable\n            var connectedSortables = ui.item.sortable._connectedSortables || [];\n\n            connectedSortables.push({\n              element: element,\n              scope: scope\n            });\n\n            ui.item.sortable._connectedSortables = connectedSortables;\n          };\n\n          callbacks.update = function(e, ui) {\n            // Save current drop position but only if this is not a second\n            // update that happens when moving between lists because then\n            // the value will be overwritten with the old value\n            if(!ui.item.sortable.received) {\n              ui.item.sortable.dropindex = ui.item.index();\n              var droptarget = ui.item.parent();\n              ui.item.sortable.droptarget = droptarget;\n\n              var droptargetScope = getElementScope(ui.item.sortable._connectedSortables, droptarget);\n              ui.item.sortable.droptargetModel = droptargetScope.ngModel;\n\n              // Cancel the sort (let ng-repeat do the sort for us)\n              // Don't cancel if this is the received list because it has\n              // already been canceled in the other list, and trying to cancel\n              // here will mess up the DOM.\n              element.sortable('cancel');\n            }\n\n            // Put the nodes back exactly the way they started (this is very\n            // important because ng-repeat uses comment elements to delineate\n            // the start and stop of repeat sections and sortable doesn't\n            // respect their order (even if we cancel, the order of the\n            // comments are still messed up).\n            if (hasSortingHelper(element, ui) && !ui.item.sortable.received &&\n                element.sortable( 'option', 'appendTo' ) === 'parent') {\n              // restore all the savedNodes except .ui-sortable-helper element\n              // (which is placed last). That way it will be garbage collected.\n              savedNodes = savedNodes.not(savedNodes.last());\n            }\n            savedNodes.appendTo(element);\n\n            // If this is the target connected list then\n            // it's safe to clear the restored nodes since:\n            // update is currently running and\n            // stop is not called for the target list.\n            if(ui.item.sortable.received) {\n              savedNodes = null;\n            }\n\n            // If received is true (an item was dropped in from another list)\n            // then we add the new item to this list otherwise wait until the\n            // stop event where we will know if it was a sort or item was\n            // moved here from another list\n            if(ui.item.sortable.received && !ui.item.sortable.isCanceled()) {\n              scope.$apply(function () {\n                ngModel.$modelValue.splice(ui.item.sortable.dropindex, 0,\n                                           ui.item.sortable.moved);\n              });\n            }\n          };\n\n          callbacks.stop = function(e, ui) {\n            // If the received flag hasn't be set on the item, this is a\n            // normal sort, if dropindex is set, the item was moved, so move\n            // the items in the list.\n            if(!ui.item.sortable.received &&\n               ('dropindex' in ui.item.sortable) &&\n               !ui.item.sortable.isCanceled()) {\n\n              scope.$apply(function () {\n                ngModel.$modelValue.splice(\n                  ui.item.sortable.dropindex, 0,\n                  ngModel.$modelValue.splice(ui.item.sortable.index, 1)[0]);\n              });\n            } else {\n              // if the item was not moved, then restore the elements\n              // so that the ngRepeat's comment are correct.\n              if ((!('dropindex' in ui.item.sortable) || ui.item.sortable.isCanceled()) &&\n                  !hasSortingHelper(element, ui)) {\n                savedNodes.appendTo(element);\n              }\n            }\n\n            // It's now safe to clear the savedNodes\n            // since stop is the last callback.\n            savedNodes = null;\n          };\n\n          callbacks.receive = function(e, ui) {\n            // An item was dropped here from another list, set a flag on the\n            // item.\n            ui.item.sortable.received = true;\n          };\n\n          callbacks.remove = function(e, ui) {\n            // Workaround for a problem observed in nested connected lists.\n            // There should be an 'update' event before 'remove' when moving\n            // elements. If the event did not fire, cancel sorting.\n            if (!('dropindex' in ui.item.sortable)) {\n              element.sortable('cancel');\n              ui.item.sortable.cancel();\n            }\n\n            // Remove the item from this list's model and copy data into item,\n            // so the next list can retrive it\n            if (!ui.item.sortable.isCanceled()) {\n              scope.$apply(function () {\n                ui.item.sortable.moved = ngModel.$modelValue.splice(\n                  ui.item.sortable.index, 1)[0];\n              });\n            }\n          };\n\n          wrappers.helper = function (inner) {\n            if (inner && typeof inner === 'function') {\n              return function (e, item) {\n                var innerResult = inner.apply(this, arguments);\n                item.sortable._isCustomHelperUsed = item !== innerResult;\n                return innerResult;\n              };\n            }\n            return inner;\n          };\n\n          scope.$watch('uiSortable', function(newVal /*, oldVal*/) {\n            // ensure that the jquery-ui-sortable widget instance\n            // is still bound to the directive's element\n            var sortableWidgetInstance = getSortableWidgetInstance(element);\n            if (!!sortableWidgetInstance) {\n              angular.forEach(newVal, function(value, key) {\n                // if it's a custom option of the directive,\n                // handle it approprietly\n                if (key in directiveOpts) {\n                  if (key === 'ui-floating' && (value === false || value === true)) {\n                    sortableWidgetInstance.floating = value;\n                  }\n\n                  opts[key] = value;\n                  return;\n                }\n\n                if (callbacks[key]) {\n                  if( key === 'stop' ){\n                    // call apply after stop\n                    value = combineCallbacks(\n                      value, function() { scope.$apply(); });\n\n                    value = combineCallbacks(value, afterStop);\n                  }\n                  // wrap the callback\n                  value = combineCallbacks(callbacks[key], value);\n                } else if (wrappers[key]) {\n                  value = wrappers[key](value);\n                }\n\n                opts[key] = value;\n                element.sortable('option', key, value);\n              });\n            }\n          }, true);\n\n          angular.forEach(callbacks, function(value, key) {\n            opts[key] = combineCallbacks(value, opts[key]);\n            if( key === 'stop' ){\n              opts[key] = combineCallbacks(opts[key], afterStop);\n            }\n          });\n\n        } else {\n          $log.info('ui.sortable: ngModel not provided!', element);\n        }\n\n        // Create sortable\n        element.sortable(opts);\n      }\n    };\n  }\n]);"]}